# -*- coding: utf-8 -*-
"""PotterNetwork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zN8s7tVe8Rqg38khaB86aZfpJHDjkUUi
"""

import networkx as nx
import matplotlib.pyplot as plt
import csv
from itertools import combinations
from operator import itemgetter

# Caricamento file e costruzione del grafo
file_csv = open('relations.csv', "r")
next(file_csv, None)  # skip the first line in the input file
Graphtype = nx.Graph()
grafo = nx.parse_edgelist(file_csv, delimiter=',', create_using=Graphtype, 
                          nodetype=int, data=(('type',str),))

# Plot del grafo
plt.figure(figsize = (12,12))
nx.draw(grafo, node_size=600, font_color = "w", with_labels=True)

# Carica nomi e biografie dei personaggi dal file characters.csv 
# e li copia in un dizionario
with open('characters.csv', mode='r') as characters_file:
    next(characters_file, None)  # skip the first line in the input file
    characters = {}
    reader = csv.reader(characters_file)
    for rows in reader:
        id = rows[0]
        name = rows[1]
        bio = rows[2]
        value = (name,bio)
        characters[id]=value
    print(characters)

print(characters["11"][0])

# Dal grafo iniziale crea due sottografi, quello degli amici (arco con "+") e quello dei nemici (arco con "-")
edge_labels = nx.get_edge_attributes(grafo,'type')
friends = []
enemies = []
for edge in edge_labels:
  value = edge_labels[edge]
  if value == "+":
    #print(edge, "are friends")
    friends.append(edge)
  else:
    #print(edge, "are enemies")
    enemies.append(edge)

grafo_friends = grafo.edge_subgraph(friends)
grafo_enemies = grafo.edge_subgraph(enemies)

# Plotta il sottografo delle relazioni di amicizia
plt.figure(figsize = (12,12))
print("Sottografo amici")
nx.draw(grafo_friends, node_size=600, font_color = "w", with_labels=True)

# Plotta il sottografo delle relazioni di inamicizia
plt.figure(figsize = (12,12))
print("Sottografo nemici")
nx.draw(grafo_enemies, node_size=600, font_color = "w", with_labels=True)

# Funzione che calcola la media tra i degree centrality di tutti i nodi
def avg_degree_centrality(grafo):
  degree_centrality_values = nx.degree_centrality(grafo)
  somma = 0
  for key in degree_centrality_values:
    somma = somma + degree_centrality_values[key]
  average = somma / grafo.number_of_nodes()
  return average

# Stampa la media tra le degree centrality dei nodi del sottografo amici
print("AVG degree centrality - sottografo AMICI: ",avg_degree_centrality(grafo_friends))

# Stampa la media tra le degree centrality dei nodi del sottografo nemici
print("AVG degree centrality - sottografo NEMICI: ", avg_degree_centrality(grafo_enemies))

# Top n nodo per degree centrality 
# es. n = 0 -> trova nodo con degree centrality più alta
# es. n =-1 -> trova nodo con degree centrality più bassa
def nodo_degree_centrality_top_n(n, grafo):
  degree_centrality_values = nx.degree_centrality(grafo)
  dc_sorted = sorted(degree_centrality_values.items(), key=lambda x:x[1], reverse=True)
  top_n = dc_sorted[n]
  nodo = (characters[str(top_n[0])][0],top_n[1])
  return nodo

# Stampa il nodo con degree centrality più alta del sottografo amici
print("Nodo con degree centrality più ALTA del sottografo amici: ",
      nodo_degree_centrality_top_n(0, grafo_friends))

# Stampa il nodo con degree centrality più bassa del sottografo amici
print("Nodo con degree centrality più BASSA del sottografo amici: ",
      nodo_degree_centrality_top_n(-1, grafo_friends))

print("\n")

# Stampa il nodo con degree centrality più alta del sottografo nemici
print("Nodo con degree centrality più ALTA del sottografo nemici",
      nodo_degree_centrality_top_n(0, grafo_enemies))

# Stampa il nodo con degree centrality più bassa del sottografo nemici
print("Nodo con degree centrality più BASSA del sottografo nemici",
      nodo_degree_centrality_top_n(-1, grafo_enemies))

# Top 10 degree centrality sottografo AMICI
print("Personaggi con PIU' amici")
for i in range(0,10):
  personaggio = nodo_degree_centrality_top_n(i, grafo_friends)
  print(i+1,"->",personaggio)

print("\n")

print("Personaggio con MENO amici")
for i in range(-1,-11,-1):
  personaggio = nodo_degree_centrality_top_n(i, grafo_friends)
  print(-i,"->",personaggio)

# Top 10 degree centrality sottografo NEMICI
print("Personaggi con PIU' nemici")
for i in range(0,10):
  personaggio = nodo_degree_centrality_top_n(i, grafo_enemies)
  print(i+1,"->",personaggio)

print("\n")

print("Personaggio con MENO nemici")
for i in range(-1,-11,-1):
  personaggio = nodo_degree_centrality_top_n(i, grafo_enemies)
  print(-i,"->",personaggio)

# Funzione per il calcolo della densità del grafo
def densità(grafo):
  n_archi = grafo.number_of_edges()
  n_archi_possibili = (n_archi * (n_archi-1))/2
  densità = n_archi/n_archi_possibili
  return(densità)

# Stampa la densità del sottografo amici
print("Densità sottografo AMICI: ",densità(grafo_friends))

print("\n")

# Stampa la densità del sottografo nemici
print("Densità sottografo NEMICI: ",densità(grafo_enemies))

# Funzione che calcola la media tra le closeness centrality di tutti i nodi
def avg_closeness_centrality(grafo):
  closeness_centrality_values = nx.closeness_centrality(grafo)
  somma = 0
  for key in closeness_centrality_values:
    somma = somma + closeness_centrality_values[key]
  average = somma / grafo.number_of_nodes()
  return average

# Stampa la media tra le closeness centrality dei nodi del sottografo amici
print("AVG closeness centrality - sottografo AMICI: ",avg_closeness_centrality(grafo_friends))

print("\n")

# Stampa la media tra le closeness centrality dei nodi del sottografo nemici
print("AVG closeness centrality - sottografo NEMICI: ", avg_closeness_centrality(grafo_enemies))

# Top n nodo per closeness centrality 
# es. n = 0 -> nodo con closeness centrality più alta
# es. n =-1 -> nodo con closeness centrality più bassa
def nodo_closeness_centrality_top_n(n, grafo):
  closeness_centrality_values = nx.closeness_centrality(grafo)
  cc_sorted = sorted(closeness_centrality_values.items(), key=lambda x:x[1], reverse=True)
  top_n = cc_sorted[n]
  nodo = (characters[str(top_n[0])][0],top_n[1])
  return nodo

# Stampa il nodo con closeness centrality più alta del sottografo amici
print("Nodo con closeness centrality più ALTA del sottografo amici: ",
      nodo_closeness_centrality_top_n(0, grafo_friends))

# Stampa il nodo con closeness centrality più bassa del sottografo amici
print("Nodo con closeness centrality più BASSA del sottografo amici: ",
      nodo_closeness_centrality_top_n(-1, grafo_friends))

print("\n")

# Stampa il nodo con closeness centrality più alta del sottografo nemici
print("Nodo con closeness centrality più ALTA del sottografo nemici",
      nodo_closeness_centrality_top_n(0, grafo_enemies))

# Stampa il nodo con closeness centrality più bassa del sottografo nemici
print("Nodo con closeness centrality più BASSA del sottografo nemici",
      nodo_closeness_centrality_top_n(-1, grafo_enemies))

# Top 10 closeness centrality sottografo AMICI
print("Personaggi PIU' vicini al centro")
for i in range(0,10):
  personaggio = nodo_closeness_centrality_top_n(i, grafo_friends)
  print(i+1,"->",personaggio)

print("\n")

print("Personaggi MENO vicini al centro")
for i in range(-1,-11,-1):
  personaggio = nodo_closeness_centrality_top_n(i, grafo_friends)
  print(-i,"->",personaggio)

# Top 10 closeness centrality sottografo NEMICI
print("Personaggi PIU' vicini al centro")
for i in range(0,10):
  personaggio = nodo_closeness_centrality_top_n(i, grafo_enemies)
  print(i+1,"->",personaggio)

print("\n")

print("Personaggi MENO vicini al centro")
for i in range(-1,-11,-1):
  personaggio = nodo_closeness_centrality_top_n(i, grafo_enemies)
  print(-i,"->",personaggio)

# Top n nodo per betweenness centrality 
# es. n = 0 -> nodo con betweenness centrality più alta
# es. n =-1 -> nodo con betweenness centrality più bassa
def nodo_betweenness_centrality_top_n(n, grafo):
  betweenness_centrality_values = nx.betweenness_centrality(grafo)
  bc_sorted = sorted(betweenness_centrality_values.items(), key=lambda x:x[1], reverse=True)
  top_n = bc_sorted[n]
  nodo = (characters[str(top_n[0])][0],top_n[1])
  return nodo

# Stampa il nodo con betweenness centrality più alta del sottografo amici
print("Nodo con betweenness centrality più ALTA del sottografo amici: ",
      nodo_betweenness_centrality_top_n(0, grafo_friends))

# Stampa il nodo con betweenness centrality più bassa del sottografo amici
print("Nodo con betweenness centrality più BASSA del sottografo amici: ",
      nodo_betweenness_centrality_top_n(-1, grafo_friends))

print("\n")

# Stampa il nodo con betweenness centrality più alta del sottografo nemici
print("Nodo con betweenness centrality più ALTA del sottografo nemici",
      nodo_betweenness_centrality_top_n(0, grafo_enemies))

# Stampa il nodo con betweenness centrality più bassa del sottografo nemici
print("Nodo con betweenness centrality più BASSA del sottografo nemici",
      nodo_betweenness_centrality_top_n(-1, grafo_enemies))

# Top 10 betweenness centrality sottografo AMICI
print("Personaggi MOLTO bridge")
for i in range(0,10):
  personaggio = nodo_betweenness_centrality_top_n(i, grafo_friends)
  print(i+1,"->",personaggio)

print("\n")

print("Personaggi MENO bridge")
for i in range(-1,-11,-1):
  personaggio = nodo_betweenness_centrality_top_n(i, grafo_friends)
  print(-i,"->",personaggio)

# Top 10 betweenness centrality sottografo NEMICI
print("Personaggi MOLTO bridge")
for i in range(0,10):
  personaggio = nodo_betweenness_centrality_top_n(i, grafo_enemies)
  print(i+1,"->",personaggio)

print("\n")

print("Personaggi MENO bridge")
for i in range(-1,-11,-1):
  personaggio = nodo_betweenness_centrality_top_n(i, grafo_enemies)
  print(-i,"->",personaggio)

# Top n nodo per eigenvector centrality 
# es. n = 0 -> nodo con eigenvector centrality più alta
# es. n =-1 -> nodo con eigenvector centrality più bassa
def nodo_eigenvector_centrality_top_n(n, grafo):
  eigenvector_centrality_values = nx.eigenvector_centrality(grafo)
  ec_sorted = sorted(eigenvector_centrality_values.items(), key=lambda x:x[1], reverse=True)
  top_n = ec_sorted[n]
  nodo = (characters[str(top_n[0])][0],top_n[1])
  return nodo

# Stampa il nodo con eigenvector centrality più alta del sottografo amici
print("Nodo con eigenvector centrality più ALTA del sottografo amici: ",
      nodo_eigenvector_centrality_top_n(0, grafo_friends))

# Stampa il nodo con eigenvector centrality più bassa del sottografo amici
print("Nodo con eigenvector centrality più BASSA del sottografo amici: ",
      nodo_eigenvector_centrality_top_n(-1, grafo_friends))

print("\n")

# Stampa il nodo con eigenvector centrality più alta del sottografo nemici
print("Nodo con eigenvector centrality più ALTA del sottografo nemici",
      nodo_eigenvector_centrality_top_n(0, grafo_enemies))

# Stampa il nodo con eigenvector centrality più bassa del sottografo nemici
print("Nodo con eigenvector centrality più BASSA del sottografo nemici",
      nodo_eigenvector_centrality_top_n(-1, grafo_enemies))

# Top 10 eigenvector centrality sottografo AMICI
print("Personaggi MOLTO eminenze grigie")
for i in range(0,10):
  personaggio = nodo_eigenvector_centrality_top_n(i, grafo_friends)
  print(i+1,"->",personaggio)

print("\n")

print("Personaggi POCO eminenze grigie")
for i in range(-1,-11,-1):
  personaggio = nodo_eigenvector_centrality_top_n(i, grafo_friends)
  print(-i,"->",personaggio)

# Top 10 eigenvector centrality sottografo NEMICI
print("Personaggi MOLTO eminenze grigie")
for i in range(0,10):
  personaggio = nodo_eigenvector_centrality_top_n(i, grafo_enemies)
  print(i+1,"->",personaggio)

print("\n")

print("Personaggi POCO eminenze grigie")
for i in range(-1,-11,-1):
  personaggio = nodo_eigenvector_centrality_top_n(i, grafo_enemies)
  print(-i,"->",personaggio)

# Funzione che calcola le triadi del grafo
def trova_triadi(grafo):
  triadi = {}
  for nodes in combinations(grafo.nodes, 3):
    n_edges = grafo.subgraph(nodes).number_of_edges()
    triadi.setdefault(n_edges, []).append(nodes)
  return(triadi)

# Stampa le triadi del sottografo amici
print("Sottografo AMICI")
triadi_grafo_friends = trova_triadi(grafo_friends)
print("Numero di triadi: ", len(triadi_grafo_friends[1]))
print("Triadi: ", triadi_grafo_friends)

print("\n")

# Stampa le triadi del sottografo nemici
print("Sottografo NEMICI")
triadi_grafo_enemies = trova_triadi(grafo_enemies)
print("Numero di triadi: ", len(triadi_grafo_enemies[1]))
print("Triadi del sottografo NEMICI: ",triadi_grafo_enemies)

# Calcolo raggio, diametro e periferia del sottografo nemici
print("Sottografo NEMICI")
print("Raggio: ",nx.radius(grafo_enemies))
print("Diametro: ",nx.diameter(grafo_enemies))
periferia_grafo_enemies = nx.periphery(grafo_enemies)
print("Periferia: ",periferia_grafo_enemies)

# Copia del sottografo amici per eliminare le componenti sconnesse (più piccole)
# in modo da mantenere la componente connessa più grande
grafo_friends_ridotto = nx.Graph(grafo_friends)
grafo_friends_ridotto.remove_node(12)
grafo_friends_ridotto.remove_node(13)
grafo_friends_ridotto.remove_node(14)
grafo_friends_ridotto.remove_node(43)
grafo_friends_ridotto.remove_node(44)

# Calcolo raggio, diametro e periferia del sottografo amici
print("Sottografo AMICI")
print("Raggio: ",nx.radius(grafo_friends_ridotto))
print("Diametro: ",nx.diameter(grafo_friends_ridotto))
periferia_grafo_friends = nx.periphery(grafo_friends_ridotto)
print("Periferia: ",periferia_grafo_friends)

# Costruzione della Ego network per i nemici

# Trova il nodo con il degree più alto
node_and_degree = grafo_enemies.degree()
(largest_hub, degree_hub) = sorted(node_and_degree, key=itemgetter(1))[-1]

# Crea l'ego network dal componente principale (largest hub)
hub_ego = nx.ego_graph(grafo_enemies, largest_hub)

# Plotta i nodi attorno al nodo ego
pos = nx.spring_layout(hub_ego)
nx.draw(hub_ego, pos, node_color='w', node_size=300, with_labels=True)

# Plotta il nodo ego (grande rosso)
nx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], node_size=500, node_color='r', with_labels=True)
plt.show()

# Costruzione della Ego network per gli amici

# Trova il nodo con il degree più alto
node_and_degree = grafo_friends_ridotto.degree()
(largest_hub, degree_hub) = sorted(node_and_degree, key=itemgetter(1))[-1]

# Crea l'ego network dal componente principale (largest hub)
hub_ego = nx.ego_graph(grafo_friends_ridotto, largest_hub)

# Plotta i nodi attorno al nodo ego
pos = nx.spring_layout(hub_ego)
nx.draw(hub_ego, pos, node_color='w', node_size=300, with_labels=True)

# Plotta il nodo ego (grande rosso)
nx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], node_size=500, node_color='r', with_labels=True)
plt.show()

print(characters["13"],[1])
#12 e 22 Hagrid con Dudley
#13 e 41 odio tra le sorelle Petunia e Lily Potter
#33 e 59 lucius malfoy e dobby

degree_centrality_values_friends = nx.degree_centrality(grafo_friends)
degree_centrality_values_enemies = nx.degree_centrality(grafo_enemies)
print(degree_centrality_values_friends)

for id, value in degree_centrality_values_friends.items():    
    if id == 32:
        print("Degree centrality FRIENDS di drago:", value)



for id, value in degree_centrality_values_enemies.items():    
    if id == 32:
        print("Degree centrality ENEMIES di drago:", value)




for id, value in degree_centrality_values_friends.items():    
    if id == 39:
        print("Degree centrality FRIENDS di harry:", value)



for id, value in degree_centrality_values_enemies.items():    
    if id == 39:
        print("Degree centrality ENEMIES di harry:", value)




for id, value in degree_centrality_values_friends.items():    
    if id == 21:
        print("Degree centrality FRIENDS di hermione:", value)



for id, value in degree_centrality_values_enemies.items():    
    if id == 21:
        print("Degree centrality ENEMIES di hermione:", value)



for id, value in degree_centrality_values_friends.items():    
    if id == 27:
        print("Degree centrality FRIENDS lavender:", value)



for id, value in degree_centrality_values_enemies.items():    
    if id == 27:
        print("Degree centrality ENEMIES lavender:", value)

degree_centrality_values = nx.degree_centrality(grafo_friends)
posizione = 0
for id, value in degree_centrality_values.items():
    posizione = posizione + 1
    if id == 6:
        print("Barty crouch sr. dc -> ", value)
        print("posizione: ", posizione)

cycle_3 = [c for c in nx.cycle_basis(grafo_friends) if len(c)==3]
print(cycle_3)

"""# New Section"""